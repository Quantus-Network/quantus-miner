# NVIDIA RTX 5090 — G2 device path (conservative lower-block example)
# This preset intentionally uses a conservative block count to be safe across early/unknown
# silicon revisions. Start here, validate stability/throughput, then scale blocks/iters up.
#
# Guidance:
# - Blocks = MINER_CUDA_THREADS / MINER_CUDA_BLOCK_DIM.
# - This file uses 128 blocks × 256 threads/block → MINER_CUDA_THREADS=32768.
#   If your card reports substantially more SMs than 128, raise MINER_CUDA_THREADS
#   to approximately (#SMs × 256) for the “lower” preset, and (~2 × #SMs × 256)
#   for an “upper” preset.
# - Keep your service at --workers 1 to avoid multiple concurrent launches on a single GPU.
# - If the embedded G2 kernel isn’t available for your device image, the engine will
#   fall back to G1 automatically (the rest of the variables are still safe).
#
# Build note:
# - When building device images specifically for this GPU generation, set CUDA_ARCH=sm_120
#   (or matching compute capability) at build time to embed a native CUBIN for your driver.

# Threads per block (warp multiple; 256 is a solid default)
MINER_CUDA_BLOCK_DIM=256

# Total threads = blocks * threads_per_block → 128 * 256 = 32768 (128 blocks)
MINER_CUDA_THREADS=32768

# Iterations per thread
# G2 guidance on high-end modern GPUs: start around 4096. Increase for longer kernel dwell time
# (fewer host round-trips) while preserving early-exit responsiveness as needed.
MINER_CUDA_ITERS=4096

# Use pinned (page-locked) host buffers (harmless in G2; helps if we fall back to G1)
MINER_CUDA_PINNED=1

# Select G2 kernel (device SHA3 + threshold + early-exit)
MINER_CUDA_MODE=g2

# Optional: force embedded image selection (default prefers cubin)
# MINER_CUDA_IMAGE=cubin
# MINER_CUDA_IMAGE=ptx

# Optional: host SHA3 workers (only used if engine falls back to G1)
# MINER_CUDA_HASH_THREADS=24

# Optional: logging verbosity
# RUST_LOG=info

# Tuning checklist (post-deploy):
# 1) Check per-launch timings in logs:
#    - “CUDA G2 kernel and sync OK (kernel_ms=…)”
# 2) If the device is underutilized (low occupancy), increase MINER_CUDA_THREADS
#    so that blocks ≈ #SMs (lower preset) or ≈ 2 × #SMs (upper preset).
# 3) If kernel_ms is very short and host round-trip dominates, increase MINER_CUDA_ITERS.
# 4) Confirm that early-exit behavior meets your latency target; reduce ITERS if needed.
