# Drop-in override: aggressive CPU affinity for dedicated hardware (miner only)
# Place this file at:
#   /etc/systemd/system/quantus-miner.service.d/20-dedicated-hardware.conf
#
# Then reload and restart:
#   sudo systemctl daemon-reload
#   sudo systemctl restart quantus-miner
#
# Rationale:
# - On dedicated hosts, bind the miner to ALL logical CPUs made available to the service
#   (i.e., the process’ cpuset), raise its CPU weight and priority, and remove artificial
#   limits. This maximizes throughput and reduces latency in tight loops.
#
# Important:
# - CPUAffinity MUST be a subset of the service’s allowed cpuset (cgroup v2:
#     /sys/fs/cgroup/cpuset.cpus.effective). If your deployment already constrains
#   the miner with a cpuset, you can omit CPUAffinity here to inherit that mask.
# - The miner logs the detected cpuset mask at startup (debug) and, when metrics
#   are enabled, exports miner_effective_cpus for dashboards.
# - Set MINER_WORKERS to match the number of CPUs in your affinity mask if you want
#   full utilization; otherwise the miner default (50% of effective CPUs) is used
#   when --workers is omitted.

[Service]
# Bind miner to ALL logical CPUs intended for mining. EDIT this to match your host.
# Example for a 16‑way logical CPU system (IDs 0‑15). If your cpuset already restricts
# CPUs, you can omit CPUAffinity to inherit the cpuset’s effective mask.
CPUAffinity=0-15

# Favor the miner over other background tasks on a dedicated host.
# (Lower nice => higher priority; -10 is a balanced aggressive choice.)
Nice=-10

# With cgroup v2, set maximum CPU weight (1–10000, default is ~100).
# This strongly biases the miner when CPU contention exists.
CPUWeight=10000

# Use standard time-sharing; RT is not recommended for user-space miners.
CPUSchedulingPolicy=other

# The miner is CPU‑bound; I/O is minimal. Defaults are fine, but we keep best‑effort here.
IOSchedulingClass=best-effort
IOSchedulingPriority=0

# Remove conservative task/memory ceilings (tune to your policy if needed).
TasksMax=infinity
MemoryMax=infinity

# Optional: pin worker count and enable metrics (uncomment and adjust).
# Ensure MINER_WORKERS matches the size of CPUAffinity (or the cpuset mask) to use all CPUs.
# Environment=MINER_ENGINE=cpu-fast
# Environment=MINER_WORKERS=16
# Environment=MINER_METRICS_PORT=9900
# Environment=RUST_LOG=info,miner=debug

# Notes & advanced tuning (optional):
# - NUMA: On multi-socket systems, prefer binding to whole NUMA nodes for locality.
#   Example: CPUAffinity=0-23 (socket 0) or 24-47 (socket 1), depending on topology.
# - Kernel isolcpus/nohz_full: For extreme isolation, consider isolating miner cores
#   via kernel cmdline and moving IRQs away from those CPUs. This is invasive and
#   should be coordinated with ops policies.
# - Verify actual affinity at runtime:
#     taskset -cp $(pidof quantus-miner)
#   and compare with:
#     cat /sys/fs/cgroup/cpuset.cpus.effective
#
# - The service logs the cpuset mask at startup and the metrics exporter (if enabled)
#   exposes miner_effective_cpus for observability.
